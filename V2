package Praktikum_ASD.AVL;
import java.util.Scanner;

public class Easy {
    public static void main(String[] args) {
        AVL avl = new AVL();
        Scanner input = new Scanner(System.in);
        int jumlahPerintah = input.nextInt();
        input.nextLine();
        for(int i = 0; i < jumlahPerintah; i++) {
            String perintah[] = input.nextLine().split(" ");
            if(perintah[0].equalsIgnoreCase("Tambah")) {
                if(perintah[1].equalsIgnoreCase("Barang")) {
                    String terimaBarang[] = input.nextLine().split(",|;");
                    for(int j = 0; j < terimaBarang.length; j+=2) {
                        String namaBarang = terimaBarang[j];
                        int hargaBarang = Integer.parseInt(terimaBarang[j+1]);
                        avl.add(namaBarang, hargaBarang);
                    }
                    System.out.println("Data " + (terimaBarang.length / 2) + " barang berhasil ditambah");
                }
            } else if(perintah[0].equalsIgnoreCase("cari")) {
                if(perintah[1].equalsIgnoreCase("Barang")) {
                String[] cari = input.nextLine().split(" ");
                String lebihKurangSama = cari[0];
                int hargaDicari = Integer.parseInt(cari[2]);
                avl.search(hargaDicari, lebihKurangSama);
                }
            }
        }
    }
}

class NodeAVL {
    int hargaBarang, height;
    String namaBarang;
    NodeAVL left, right;

    NodeAVL(String namaBarang, int hargaBarang) {
        this.namaBarang = namaBarang;
        this.hargaBarang = hargaBarang;
        height = 1;
        left = right = null;
    }
}

class AVL {
    NodeAVL root;

    public int height(NodeAVL N) {
        if (N == null) {
            return 0;
        }
        return N.height;
    }

    // fungsi untuk rotasi kanan
    public NodeAVL rightRotate(NodeAVL y) {
        NodeAVL x = y.left;
        NodeAVL T2 = x.right;
        // rotasi kanan
        x.right = y;
        y.left = T2;
        // perbarui tinggi dari node
        y.height = Math.max(height(y.left), height(y.right)) + 1;
        x.height = Math.max(height(x.left), height(x.right)) + 1;
        return x;
    }

    // fungsi untuk rotasi kiri
    public NodeAVL leftRotate(NodeAVL x) {
        NodeAVL y = x.right;
        NodeAVL T2 = y.left;
        // rotasi kiri
        y.left = x;
        x.right = T2;
        // perbarui tinggi dari node
        x.height = Math.max(height(x.left), height(x.right)) + 1;
        y.height = Math.max(height(y.left), height(y.right)) + 1;
        return y;
    }

    // cek faktor keseimbangan node
    public int getBalance(NodeAVL N) {
        if (N == null) {
            return 0;
        }
        return height(N.left) - height(N.right);
    }

    public void add(String namaBarang, int data) {
        root = add(root, namaBarang, data);
    }

    public NodeAVL add(NodeAVL node, String namaBarang, int hargaBarang) {
        if (node == null){
            return (new NodeAVL(namaBarang, hargaBarang));
        }
        if (hargaBarang < node.hargaBarang) {
            node.left = add(node.left, namaBarang, hargaBarang);
        }
        else if (hargaBarang > node.hargaBarang) {
            node.right = add(node.right, namaBarang, hargaBarang);
        }
        else {
            return node;
        }
        node.height = 1 + Math.max(height(node.left), height(node.right));
        int balance = getBalance(node);
        // right rotation (left of left)
        if (balance > 1 && hargaBarang < node.left.hargaBarang) {
            return rightRotate(node);
        }
        // left rotation (right of right)
        if (balance < -1 && hargaBarang > node.right.hargaBarang) {
            return leftRotate(node);
        }
        // left-right rotation (right of left)
        if (balance > 1 && hargaBarang > node.left.hargaBarang) {
            node.left = leftRotate(node.left);
            return rightRotate(node);
        }
        // right-left rotation (left of right)
        if (balance < -1 && hargaBarang < node.right.hargaBarang) {
            node.right = rightRotate(node.right);
            return leftRotate(node);
        }
        return node;
    }

    public void delete(int hargaBarang) {
        root = delete(root, hargaBarang);
    }
    
    public NodeAVL delete(NodeAVL node, int hargaBarang) {
        // jika tree hanya memiliki satu node
        if (node == null) {
            return node;
        }
        if (hargaBarang < node.hargaBarang) {
            node.left = delete(node.left, hargaBarang);
        } 
        else if (hargaBarang > node.hargaBarang) {
            node.right = delete(node.right, hargaBarang);
        } 
        else {
            // leaf node
            if (node.left == null && node.right == null) {
                return null;
            }
            // memiliki 1 child node
            if (node.right == null) {
                return node.left;
            }
            if (node.left == null) {
                return node.right;
            }
            // memiliki 2 child node
            NodeAVL smallestValue = findSmallestValue(node.right);
            node.hargaBarang = smallestValue.hargaBarang;
            node.right = delete(node.right, smallestValue.hargaBarang);
            return node;
        }
        // perbarui tinggi node
        node.height = Math.max(height(node.left), height(node.right)) + 1;
        // cek faktor keseimbangan node
        int balance = getBalance(node);
        // right rotation (left of left)
        if (balance > 1 && getBalance(node.left) >= 0) {
            return rightRotate(node);
        }
        // left rotation (right of right)
        if (balance < -1 && getBalance(node.right) <= 0) {
            return leftRotate(node);
        }
        // left-right rotation (right of left)
        if (balance > 1 && getBalance(node.left) < 0) {
            node.left = leftRotate(node.left);
            return rightRotate(node);
        }
        // right-left rotation (left of right)
        if (balance < -1 && getBalance(node.right) > 0) {
            node.right = rightRotate(node.right);
            return leftRotate(node);
        }
        return node;
    }
    
    public NodeAVL findSmallestValue(NodeAVL node) {
        NodeAVL current = node;
        while (current.left != null) {
            current = current.left;
        }
        return current;
    }

    public NodeAVL findBiggestValue(NodeAVL node) {
        NodeAVL current = node;
        while (current.right != null) {
            current = current.right;
        }
        return current;
    }

    public void preorder(NodeAVL current) {
        System.out.print(current.hargaBarang + " ");
        if (current.left != null) {
            preorder(current.left);
        }
        if (current.right != null) {
            preorder(current.right);
        }
    }

    public void inorder(NodeAVL current) {
        if (current.left != null) {
            inorder(current.left);
        }
        System.out.print(current.hargaBarang + " ");
        if (current.right != null) {
            inorder(current.right);
        }
    }

    public void postorder(NodeAVL current) {
        if (current.left != null) {
            postorder(current.left);
        }
        if (current.right != null) {
            postorder(current.right);
        }
        System.out.print(current.hargaBarang + " ");
    }

    public void search(int hargaDicari, String lebihKurangSama) {
        boolean found = search(root, hargaDicari, lebihKurangSama,false);
        if (!found) {
            System.out.println("Data barang tidak bisa ditemukan");
        }
    }
    
    
    private boolean search(NodeAVL node, int hargaDicari, String lebihKurangSama, boolean found) {
        if (node == null) {
            return found;
        }
        
        if (lebihKurangSama.equalsIgnoreCase("lebih")) {
            if (node.hargaBarang > hargaDicari) {
                found = true;
                search(node.right, hargaDicari, lebihKurangSama, true);
                System.out.println(node.namaBarang + " = " + node.hargaBarang);
                search(node.left, hargaDicari, lebihKurangSama, true);
            } else {
            found = search(node.right, hargaDicari, lebihKurangSama, found);
            }
        } else if (lebihKurangSama.equalsIgnoreCase("kurang")) {
            if (node.hargaBarang < hargaDicari) {
                found = true;
                search(node.right, hargaDicari, lebihKurangSama, found);
                System.out.println(node.namaBarang + " = " + node.hargaBarang);
                search(node.left, hargaDicari, lebihKurangSama, found);
            } else {
            found = search(node.left, hargaDicari, lebihKurangSama, found);
            }
        } else if (lebihKurangSama.equalsIgnoreCase("sama")) {
            if (node.hargaBarang == hargaDicari) {
                found = true;
                System.out.println(node.namaBarang + " = " + node.hargaBarang);
            }
            found = search(node.right, hargaDicari, lebihKurangSama, found);
            found = search(node.left, hargaDicari, lebihKurangSama, found);
        }
        
        return found;
    }
    
    
}

class NodeStack {
    int hargaBarang, urutan;
    String namaBarang;
    NodeStack next;

    public NodeStack(String namaBarang, int hargaBarang) {
        this.namaBarang = namaBarang;
        this.hargaBarang = hargaBarang;
        this.next = null;
        this.urutan = 0;
    }
}

class Stack {
    NodeStack head, tail;
    int size = 0;
    int count = 1; // tambahkan variabel count dan inisialisasikan dengan nilai 1

    public int size() {
        return size;
    }

    public boolean isEmpty() {
        return size == 0;
    }

    public void push(String namaBarang, int hargaBarang) {
        NodeStack input = new NodeStack(namaBarang, hargaBarang);  
        if (isEmpty()) {
            head = tail = input;
            input.urutan = count;
        }
        else {
            tail.next = input;
            tail = input;
            input.urutan = count; // tambahkan baris ini untuk memberikan nomor pada setiap elemen yang dimasukkan
        }
        size++;
        count++; // tambahkan baris ini untuk meningkatkan nilai variabel count
    }

    // implementasi metode lainnya seperti sebelumnya


    public void pop() {
        if (size == 1) {
            head = head.next;
            size--;
        }
        else if (!isEmpty()) {
            NodeStack pointer = head;
            while (pointer.next != tail) {
                pointer = pointer.next;
            }
            pointer.next = null;
            tail = pointer;
            size--;
        }
    }

    public int top() {
        return tail.hargaBarang;
    }

    public boolean isExists(int hargaBarang) {
        NodeStack pointer = head;
        while (pointer != null) {
            if (pointer.hargaBarang == hargaBarang) return true;
            pointer = pointer.next;
        }
        return false;
    }

    static int urutan = 1;

    // public void print() {
    //     print(1);
    // }

    public void print() {
        NodeStack pointer = head;   
        while (pointer != null) {
            System.out.print(urutan + ". " + pointer.namaBarang + " = " + pointer.hargaBarang);
            urutan++;
            pointer = pointer.next;
        }
        System.out.println();
        }  
    }

    

