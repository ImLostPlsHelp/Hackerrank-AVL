import java.util.Scanner;

public class Medium {
    public static void main(String[] args) {
        AVL avl = new AVL();
        Scanner input = new Scanner(System.in);
        int jumlahPerintah = input.nextInt();
        input.nextLine();
        for(int i = 0; i < jumlahPerintah; i++) {
            String perintah = input.next();
            if(perintah.equalsIgnoreCase("main")) {
                String tambah[] = input.nextLine().split("-");
                String username = tambah[0].trim();
                int skor = Integer.parseInt(tambah[1]);
                avl.add(username, skor);
                System.out.println(username + " telah menyelesaikan permainan dengan skor " + skor);
            } else if(perintah.equalsIgnoreCase("cari")) {
                String lanjutan = input.next();
                if(lanjutan.equalsIgnoreCase("tertinggi")) {
                    avl.findBiggestValue(avl.root);
                } else if(lanjutan.equalsIgnoreCase("terendah")) {
                    avl.findSmallestValue(avl.root);
                } else if(lanjutan.equalsIgnoreCase("lainnya")) {
                    String nama = input.next();
                    boolean cek = avl.findValue(avl.root, nama, false);
                    if(!cek) {
                        System.out.println("Pemain belum terdaftar");
                    }
                }
            } else if(perintah.equalsIgnoreCase("tampilkan")) {
                avl.preorder(avl.root);
            } else if(perintah.equalsIgnoreCase("Bandingkan")) {
                String perbandingan[] = input.nextLine().split("/");
                String player1 = perbandingan[0].trim();
                String player2 = perbandingan[1].trim();
                avl.perbandingan(player1, player2);
            }
        }
        
    }
}

class NodeAVL {
    String namaPemain;
    int skorPemain, height;
    NodeAVL left, right;

    NodeAVL(String namaPemain, int skorPemain) {
        this.namaPemain = namaPemain;
        this.skorPemain = skorPemain;
        height = 1;
        left = right = null;
    }
}

class AVL {
    NodeAVL root;

    public int height(NodeAVL N) {
        if (N == null) {
            return 0;
        }
        return N.height;
    }

    // fungsi untuk rotasi kanan
    public NodeAVL rightRotate(NodeAVL y) {
        NodeAVL x = y.left;
        NodeAVL T2 = x.right;
        // rotasi kanan
        x.right = y;
        y.left = T2;
        // perbarui tinggi dari node
        y.height = Math.max(height(y.left), height(y.right)) + 1;
        x.height = Math.max(height(x.left), height(x.right)) + 1;
        return x;
    }

    // fungsi untuk rotasi kiri
    public NodeAVL leftRotate(NodeAVL x) {
        NodeAVL y = x.right;
        NodeAVL T2 = y.left;
        // rotasi kiri
        y.left = x;
        x.right = T2;
        // perbarui tinggi dari node
        x.height = Math.max(height(x.left), height(x.right)) + 1;
        y.height = Math.max(height(y.left), height(y.right)) + 1;
        return y;
    }

    // cek faktor keseimbangan node
    public int getBalance(NodeAVL N) {
        if (N == null) {
            return 0;
        }
        return height(N.left) - height(N.right);
    }

    public void add(String namaPemain, int skorPemain) {
        root = add(root, namaPemain, skorPemain);
    }

    public void search(NodeAVL node, String namaPemain, int skorPemain) {
        if(node != null) {
            if(node.namaPemain.equalsIgnoreCase(namaPemain)) {
                node.skorPemain = skorPemain;
            } else {
            if(node.left != null) {
                search(node.left, namaPemain, skorPemain);
            } else if(node.right != null) {
                search(node.right, namaPemain, skorPemain);
            }
        }
    }
}

    public NodeAVL add(NodeAVL node, String namaPemain, int skorPemain) {
        if (node == null){
            return (new NodeAVL(namaPemain, skorPemain));
        }
        search(node, namaPemain, skorPemain);
        if (skorPemain < node.skorPemain) {
            node.left = add(node.left, namaPemain, skorPemain);
        }
        else if (skorPemain > node.skorPemain) {
            node.right = add(node.right, namaPemain, skorPemain);
        }
        node.height = 1 + Math.max(height(node.left), height(node.right));
        int balance = getBalance(node);
        // right rotation (left of left)
        if (balance > 1 && skorPemain < node.left.skorPemain) {
            return rightRotate(node);
        }
        // left rotation (right of right)
        if (balance < -1 && skorPemain > node.right.skorPemain) {
            return leftRotate(node);
        }
        // left-right rotation (right of left)
        if (balance > 1 && skorPemain > node.left.skorPemain) {
            node.left = leftRotate(node.left);
            return rightRotate(node);
        }
        // right-left rotation (left of right)
        if (balance < -1 && skorPemain < node.right.skorPemain) {
            node.right = rightRotate(node.right);
            return leftRotate(node);
        }
        return node;
    }
    

    //the delete method will be used to delete a node from the tree by searching if a node has the same name as the input

    // public void delete(String namaPemain) {
    //     root = delete(root, namaPemain);
    // }
    
    // public NodeAVL delete(NodeAVL node, String namaPemain) {
    //     // jika tree hanya memiliki satu node
    //     if (node == null) {
    //         return node;
    //     }
    //     if (namaPemain == node.namaPemain) {
    //         node = delete(node, namaPemain);
    //     } 
    //     else if (skor > node.skorPemain) {
    //         node.right = delete(node.right, data);
    //     } 
    //     else {
    //         // leaf node
    //         if (node.left == null && node.right == null) {
    //             return null;
    //         }
    //         // memiliki 1 child node
    //         if (node.right == null) {
    //             return node.left;
    //         }
    //         if (node.left == null) {
    //             return node.right;
    //         }
    //         // memiliki 2 child node
    //         NodeAVL smallestValue = findSmallestValue(node.right);
    //         node.skorPemain = smallestValue.skorPemain;
    //         node.right = delete(node.right, smallestValue.skorPemain);
    //         return node;
    //     }
    //     // perbarui tinggi node
    //     node.height = Math.max(height(node.left), height(node.right)) + 1;
    //     // cek faktor keseimbangan node
    //     int balance = getBalance(node);
    //     // right rotation (left of left)
    //     if (balance > 1 && getBalance(node.left) >= 0) {
    //         return rightRotate(node);
    //     }
    //     // left rotation (right of right)
    //     if (balance < -1 && getBalance(node.right) <= 0) {
    //         return leftRotate(node);
    //     }
    //     // left-right rotation (right of left)
    //     if (balance > 1 && getBalance(node.left) < 0) {
    //         node.left = leftRotate(node.left);
    //         return rightRotate(node);
    //     }
    //     // right-left rotation (left of right)
    //     if (balance < -1 && getBalance(node.right) > 0) {
    //         node.right = rightRotate(node.right);
    //         return leftRotate(node);
    //     }
    //     return node;
    // }
    
    public void findSmallestValue(NodeAVL node) {
        NodeAVL current = node;
        while (current.left != null) {
            current = current.left;
        }
        System.out.println("Pemain dengan skor tertinggi adalah " + current.namaPemain + " dengan skor " + current.skorPemain);
    }

    public boolean findValue(NodeAVL node, String nama, boolean found) {
        if(node == null){
            return found;
        } else {
            if(node.namaPemain.equalsIgnoreCase(nama)){
                found = true;
                System.out.println("Skor yang dimiliki oleh " + node.namaPemain + " adalah " + node.skorPemain);
            }
            found = findValue(node.left, nama, found);
            found = findValue(node.right, nama, found);
        }
        return found;
    }

    public void perbandingan(String player1, String player2) {
        int skor1 = 0;
        int skor2 = 0;
        boolean found = perbandingan(root, player1, player2, false, false, false, skor1, skor2);
        if(!found) {
            System.out.println("Tidak bisa dibandingkan karena pemain tidak terdaftar");
        }
    }

    public boolean perbandingan(NodeAVL node, String player1, String player2, boolean found, boolean found1, boolean found2, int skor1, int skor2) {
        if(node == null){
            return found;
        } else {
            if(node.namaPemain.equalsIgnoreCase(player1)){
                skor1 = node.skorPemain;
                System.out.println(skor1);
                System.out.println(skor2);
                found1 = true;
            } else if (node.namaPemain.equalsIgnoreCase(player2)){
                skor2 = node.skorPemain;
                System.out.println(skor1);
                System.out.println(skor2);
                found2 = true;
        }
            found = perbandingan(node.left, player1, player2, found, found1, found2, skor1, skor2);
            found = perbandingan(node.right, player1, player2, found, found1, found2, skor1, skor2);
        }
        if(skor1 != 0) {
            found1 = true;
        }
        if(skor2 != 0) {
            found2 = true;
        }
        if(found1 && found2) {
            found = true;
        }
        if(found) {
            if(skor1 < skor2 && skor1 != 0 && skor2 != 0) {
                System.out.println(player2 + " lebih unggul dari " + player1);
            } else if(skor1 > skor2 && skor1 != 0 && skor2 != 0) {
                System.out.println(player1 + " lebih unggul dari " + player2);
            }
        }
        return found;
    }

    public void findBiggestValue(NodeAVL node) {
        NodeAVL current = node;
        while (current.right != null) {
            current = current.right;
        }
        System.out.println("Pemain dengan skor tertinggi adalah " + current.namaPemain + " dengan skor " + current.skorPemain);
    }

    public void preorder(NodeAVL current) {
        if(root == null) {
            System.out.println("Leaderboard kosong");
            return;
        }
        System.out.println(current.namaPemain + " = " + current.skorPemain);
        if (current.left != null) {
            preorder(current.left);
        }
        if (current.right != null) {
            preorder(current.right);
        }
    }

    public void inorder(NodeAVL current) {
        if (current.left != null) {
            inorder(current.left);
        }
        System.out.print(current.skorPemain + " ");
        if (current.right != null) {
            inorder(current.right);
        }
    }

    public void postorder(NodeAVL current) {
        if (current.left != null) {
            postorder(current.left);
        }
        if (current.right != null) {
            postorder(current.right);
        }
        System.out.print(current.skorPemain + " ");
    }
}

